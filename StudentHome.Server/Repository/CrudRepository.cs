using System;
using System.Collections.Generic;
using System.Reflection;
using System.Xml;
using StudentHome.Api.Domain;
using StudentHome.Api.Service;

namespace StudentHome.Server.Repository
{
    public abstract class CrudRepository<T> : IRepository<T> where T : HasId<int>
    {
        protected int GeneratedId = 0;
        private IList<T> entities = new List<T>();
        public int Count()
        {
            return entities.Count;
        }

        public void Save(T objectToSave)
        {
            T obj = (T)FindOne(objectToSave);
            if (obj != null)
                throw new RepositoryException("Duplicate entity to save!");
            SetId(objectToSave);
            entities.Add(objectToSave);
        }

        public object FindOne(T objectToFind)
        {
            foreach (T obj in entities)
            {
                if (obj.Equals(objectToFind))
                    return obj;
            }
            return null;
        }

        public IList<T> FindAll()
        {
            return entities;
        }

        protected virtual void SetId(T obj) { }

        public void SaveAllToXml(string storageFile)
        {
            //prepare the settings used for the XML file
            XmlWriterSettings settings = new XmlWriterSettings();
            settings.Indent = true;

            XmlWriter writer = XmlWriter.Create(storageFile, settings);
            //append the start tag to the document
            writer.WriteStartDocument();

            //disclaimer
            writer.WriteComment("This file is generated by the program.");

            //get the properties of the object
            PropertyInfo[] properties = GetTypeForGenericE().GetProperties();

            writer.WriteStartElement("objects");
            foreach (var entity in entities)
            {
                //add the object tag
                writer.WriteStartElement(GetNameForGenericE());

                foreach (PropertyInfo property in properties)
                {
                    string fieldName = property.Name;
                    string fieldValue = property.GetValue(entity).ToString();
                    writer.WriteElementString(fieldName, fieldValue);
                }
                //end object tag
                writer.WriteEndElement();
            }

            //end the parent element
            writer.WriteEndElement();

            writer.Flush();
            writer.Close();
        }

        public void LoadAllFromXml(string storageFile)
        {
            XmlReader reader = XmlReader.Create(storageFile);

            Type type = GetTypeForGenericE();
            T element = (T)Activator.CreateInstance(type);
            PropertyInfo property;

            String className = GetNameForGenericE();
            Type classType = GetTypeForGenericE();

            while (reader.Read())
            {
                switch (reader.NodeType)
                {
                    case XmlNodeType.Element:

                        String readerName = reader.Name;
                        if (readerName == className)
                        {
                            element = (T)Activator.CreateInstance(classType);
                        }
                        else
                        {
                            property = classType.GetProperty(readerName);
                            if (property != null)
                            {
                                String rawValue = reader.ReadString();
                                object value = Convert.ChangeType(rawValue, property.PropertyType);
                                if (property.CanWrite) property.SetValue(element, value);
                            }
                        }

                        break;

                    case XmlNodeType.EndElement:
                        if (reader.Name == className)
                        {
                            entities.Add(element);
                        }
                        break;
                }
            }
            reader.Close();
        }

        private Type GetTypeForGenericE()
        {
            return typeof(T);
        }

        private String GetNameForGenericE()
        {
            return GetTypeForGenericE().Name;
        }
    }
}
